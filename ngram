#!/bin/zsh

#TODO help print
#TODO reset ngrams after newlines to allow for per-document ngrams

set -o errexit
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

unset c #Reserved inline comment variable

zparseopts -A opts -F -D h=HELP ${c#; Prints this help menu}\
	   l:=LEFTPAD ${c#LEFTPADDING; Amount of left padding at the beginning of lines}\
	   n:=N ${c#N; N of ngram}\
	   p:=PADCHAR ${c#PADCHAR; Character to use for padding. Defaults to _}\
	   r:=RIGHTPAD ${c#RIGHTPADDING; Amount of right padding at the end of lines}\
	   s:=SKIPLEN ${c#SKIPLEN; Enables skipgrams of skip length SKIPLEN}

if [[ "${#HELP}" -eq 1 ]]; then
    echo 'help nyi'
    exit
fi

awk -vRS='[[:space:][:cntrl:]]+' -vN="${N[2]:-1}" -vSKIP="${SKIPLEN[2]:-0}" -vPADC="${PADCHAR[2]:-_}" -vL="${LEFTPAD[2]:-0}" -vR="${RIGHTPAD[2]:-0}" -f <(cat <<'EOF'
BEGIN {left_pad()} 
$0 {add_word($0,ngram); generate_ngrams(words,ngram,1)} 
"\n"==RT {right_pad(); delete words; left_pad()} 
function add_word(w,ngram, i){
	 delete ngram; 
	 for (i=N+SKIP; 1<i; i--){
	     words[i-1]=words[i]}; 
	     words[N+SKIP]=w} 
function left_pad( i){
	 for (i=0;i<L;i++){
	     add_word(PADC,ngram)}} 
function right_pad( i){
	 for (i=0;i<R;i++){
	     add_word(PADC,ngram); 
	     generate_ngrams(words,ngram,1)}}
function generate_ngrams(words,ngram,st){
	 if (length(ngram)==N) return print_ngram(ngram);
	 if (length(words)<st || !words[1]) return;
	 ngram[length(ngram)+1]=words[st];
	 generate_ngrams(words,ngram,st+1);
	 delete ngram[length(ngram)];
	 generate_ngrams(words,ngram,st+1);
}
function print_ngram(ngram, i){
	 for (i=1;i<=length(ngram);i++){
	     printf("%s%s",ngram[i],length(ngram)==i?"\n":" ")}}
EOF
) "${1:--}"
