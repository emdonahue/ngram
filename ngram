#!/bin/zsh

#TODO Make RIGHTPAD explicit length optional and default to computing enough padding to make every word ngram-initial

set -o errexit
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

unset c #Reserved inline comment variable

zparseopts -A opts -F -D h=HELP ${c#; Prints this help menu}\
	   n:=N ${c#N; N of ngram}\
	   s:=SKIPLEN ${c#SKIPLEN; Enables skipgrams of skip length SKIPLEN}\
	   u=UNORDERED ${c#; Unordered. Prints ngrams in alphabetical order regardless of ordere encountered in the text.}\
	   p:=PADCHAR ${c#PADCHAR; Character to use for padding. Defaults to _}\
	   l:=LEFTPAD ${c#LEFTPADDING; Amount of left padding at the beginning of lines}\
	   r:=RIGHTPAD ${c#RIGHTPADDING; Amount of right padding at the end of lines}	   

if [[ "${#HELP}" -eq 1 ]]; then
    echo 'ngram - A commandline utility for generating ngrams and skipgrams from text files.\nUsage: ngram [OPTIONS...] [FILE...]\n\nOptions:'
    sed -nE 's/.*(\w+)[-+:]*=\w+ \$\{c#(.*); (.*)\}.*/\t-\1 \2\t\3/p' "$0"
    exit
fi

#words - the moving window of tokens
#ngram - the N-sized ngram array
awk -vRS='[[:space:][:cntrl:]]+' -vN="${N[2]:-1}" -vSKIP="${SKIPLEN[2]:-0}" -vUNORDERED="$#UNORDERED" -vPADC="${PADCHAR[2]:-_}" -vL="${LEFTPAD[2]:-0}" -vR="${RIGHTPAD[2]:-0}" -f <(cat <<'EOF'
BEGIN {delete words; left_pad(); "start by generating any initial padding"}

$0 {add_word($0); generate_ngrams(words); "for each non blank word, add it and print the ngrams"}

"\n"==RT {right_pad(); finish_window(); delete words; left_pad(); "every newline, generate right padding, print sub-window skipgrams, reset the window, and add new left padding"}

function add_word(w, i){ "add a word to the end of the window and shift everything one over, dropping first"
	 for (i=2; i<=N+SKIP; i++) words[i-1]=words[i];
	 words[N+SKIP]=w} 

function left_pad( i){ "add the padding character to the window L times before beginning the line"
	 for (i=0;i<L;i++) add_word(PADC)} 

function right_pad( i){ "add the padding character to the window R times after ending the line"
	 for (i=0;i<R;i++){
	     add_word(PADC); 
	     generate_ngrams(words)}}

function finish_window() { "generate all remaining sub-window skip pairs after each newline"
	 for (i=SKIP;i<=N;i++){
	     add_word(""); 
	     generate_ngrams(words)}}

function generate_ngrams(words, ngram){ "generate all possible ngrams with words[1] as first word"
	 if (!words[1]) return;
	 delete ngram;
	 ngram[1]=words[1];
	 _generate_ngrams(words,ngram,2);}

function _generate_ngrams(words,ngram,st){ "recursively build, print, and delete the ngram"
	 if (length(ngram)==N) return print_ngram(ngram);
	 if (length(words)<st || !words[st]) return;
	 ngram[length(ngram)+1]=words[st];
	 _generate_ngrams(words,ngram,st+1);
	 delete ngram[length(ngram)];
	 _generate_ngrams(words,ngram,st+1);}

function print_ngram(ngram, i, sorted){ "print the ngram sorted or unsorted"
	 if (UNORDERED) { asort(ngram,sorted); print_array(sorted); }
	 else print_array(ngram);}

function print_array(arr,  i){
	 for (i=1;i<=length(arr);i++){
	     printf("%s%s",arr[i],length(arr)==i?"\n":" ")}}
EOF
) "$@"
