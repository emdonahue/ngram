#!/bin/zsh

assert() {
       if [[ "$2" != "$3" ]]; then
       	   echo "Failure: $1\n\tExpected: $3\n\tReceived: $2"
	   ERR=1
       fi
}

assert 'unigrams' "$(./ngram <(echo 'a b c'))" "$(echo 'a\nb\nc')"
assert 'unigrams stdin' "$(echo 'a b c' | ./ngram)" "$(echo 'a\nb\nc')"
assert 'unigrams multifile' "$(./ngram <(echo 'a') <(echo 'b c'))" "$(echo 'a\nb\nc')"
assert 'bigrams' "$(./ngram -n2 <(echo 'a b c'))" "$(echo 'a b\nb c')"
assert 'bigrams unordered' "$(./ngram -un2 <(echo 'a b c b a'))" "$(echo 'a b\nb c\nb c\na b')"
assert 'left pad bigrams' "$(./ngram -l1 -n2 <(echo 'a\nb\nc'))" "$(echo '_ a\n_ b\n_ c')"
assert 'custom left pad bigrams' "$(./ngram -l1 -n2 -px <(echo 'a\nb\nc'))" "$(echo 'x a\nx b\nx c')"
assert 'right pad bigrams' "$(./ngram -r1 -n2 <(echo 'a\nb\nc'))" "$(echo 'a _\nb _\nc _')"
assert 'skipgrams' "$(./ngram -s1 -n2 <(echo 'a b c'))" "$(echo 'a b\na c\nb c')"
assert 'skipgrams moving window' "$(./ngram -s1 -n1 <(echo 'a b c'))" "$(echo 'a\nb\nc')"
assert 'skipgrams long' "$(./ngram -s2 -n3 <(echo 'a b c d e'))" "$(echo 'a b c\na b d\na b e\na c d\na c e\na d e\nb c d\nb c e\nb d e\nc d e')"
assert 'skipgrams unordered' "$(./ngram -s1 -n2 -u <(echo 'a b c'))" "$(echo 'a b\na c\nb c')"
assert 'skipgrams unordered large window' "$(./ngram -s2 -n2 -u <(echo 'a b c d'))" "$(echo 'a b\na c\na d\nb c\nb d\nc d')"
assert 'skipgrams unordered moving window' "$(./ngram -s1 -n2 -u <(echo 'a b c d'))" "$(echo 'a b\na c\nb c\nb d\nc d')"
assert 'skipgrams unordered out of order' "$(./ngram -s1 -n2 -u <(echo 'a c b'))" "$(echo 'a c\na b\nb c')"
assert 'skipgrams no newline' "$(./ngram -s2 -n2 -u <(echo -n 'a b c d'))" "$(echo 'a b\na c\na d\nb c\nb d\nc d')"
assert 'unigrams distance' "$(./ngram -d <(echo 'a b c'))" "$(echo 'a\nb\nc')"
assert 'bigrams distance' "$(./ngram -dn2 <(echo 'a b c'))" "$(echo 'a b 0\nb c 0')"
assert 'skipgrams distance' "$(./ngram -dn2 -s2 <(echo 'a b c d'))" "$(echo 'a b 0\na c 1\na d 2\nb c 0\nb d 1\nc d 0')"
assert 'skip trigrams distance' "$(./ngram -dn3 -s2 <(echo 'a b c d'))" "$(echo 'a b 0 c 0\na b 0 d 1\na c 1 d 0\nb c 0 d 0')"

[[ -z "$ERR" ]] && echo "All Tests Pass"
exit "$ERR"
